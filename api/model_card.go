/*
Axie Origin Data

This API about Axie Infinity: Origin will provide all the information you need about this NFT game ðŸ’ª

API version: 1.0
Contact: tony.duong.102@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Card Axie Infinity: Origin - Card
type Card struct {
	Id int32 `json:"id"`
	Class string `json:"class"`
	Part string `json:"part"`
	EnergyCost int32 `json:"energyCost"`
	Value *int32 `json:"value,omitempty"`
	Effect *string `json:"effect,omitempty"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Abilities []string `json:"abilities,omitempty"`
}

// NewCard instantiates a new Card object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCard(id int32, class string, part string, energyCost int32, name string) *Card {
	this := Card{}
	this.Id = id
	this.Class = class
	this.Part = part
	this.EnergyCost = energyCost
	this.Name = name
	return &this
}

// NewCardWithDefaults instantiates a new Card object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardWithDefaults() *Card {
	this := Card{}
	return &this
}

// GetId returns the Id field value
func (o *Card) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Card) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Card) SetId(v int32) {
	o.Id = v
}

// GetClass returns the Class field value
func (o *Card) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *Card) GetClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *Card) SetClass(v string) {
	o.Class = v
}

// GetPart returns the Part field value
func (o *Card) GetPart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Part
}

// GetPartOk returns a tuple with the Part field value
// and a boolean to check if the value has been set.
func (o *Card) GetPartOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Part, true
}

// SetPart sets field value
func (o *Card) SetPart(v string) {
	o.Part = v
}

// GetEnergyCost returns the EnergyCost field value
func (o *Card) GetEnergyCost() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnergyCost
}

// GetEnergyCostOk returns a tuple with the EnergyCost field value
// and a boolean to check if the value has been set.
func (o *Card) GetEnergyCostOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EnergyCost, true
}

// SetEnergyCost sets field value
func (o *Card) SetEnergyCost(v int32) {
	o.EnergyCost = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Card) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Card) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Card) SetValue(v int32) {
	o.Value = &v
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *Card) GetEffect() string {
	if o == nil || o.Effect == nil {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetEffectOk() (*string, bool) {
	if o == nil || o.Effect == nil {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *Card) HasEffect() bool {
	if o != nil && o.Effect != nil {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *Card) SetEffect(v string) {
	o.Effect = &v
}

// GetName returns the Name field value
func (o *Card) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Card) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Card) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Card) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Card) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Card) SetDescription(v string) {
	o.Description = &v
}

// GetAbilities returns the Abilities field value if set, zero value otherwise.
func (o *Card) GetAbilities() []string {
	if o == nil || o.Abilities == nil {
		var ret []string
		return ret
	}
	return o.Abilities
}

// GetAbilitiesOk returns a tuple with the Abilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAbilitiesOk() ([]string, bool) {
	if o == nil || o.Abilities == nil {
		return nil, false
	}
	return o.Abilities, true
}

// HasAbilities returns a boolean if a field has been set.
func (o *Card) HasAbilities() bool {
	if o != nil && o.Abilities != nil {
		return true
	}

	return false
}

// SetAbilities gets a reference to the given []string and assigns it to the Abilities field.
func (o *Card) SetAbilities(v []string) {
	o.Abilities = v
}

func (o Card) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["class"] = o.Class
	}
	if true {
		toSerialize["part"] = o.Part
	}
	if true {
		toSerialize["energyCost"] = o.EnergyCost
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Effect != nil {
		toSerialize["effect"] = o.Effect
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Abilities != nil {
		toSerialize["abilities"] = o.Abilities
	}
	return json.Marshal(toSerialize)
}

type NullableCard struct {
	value *Card
	isSet bool
}

func (v NullableCard) Get() *Card {
	return v.value
}

func (v *NullableCard) Set(val *Card) {
	v.value = val
	v.isSet = true
}

func (v NullableCard) IsSet() bool {
	return v.isSet
}

func (v *NullableCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCard(val *Card) *NullableCard {
	return &NullableCard{value: val, isSet: true}
}

func (v NullableCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


