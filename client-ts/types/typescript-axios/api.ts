/* tslint:disable */
/* eslint-disable */
/**
 * Axie Origin Data
 * This API about Axie Infinity: Origin will provide all the information you need about this NFT game ðŸ’ª
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tony.duong.102@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 * Axie Infinity: Origin - Card
 * @export
 * @interface Card
 */
export interface Card {
  /**
   *
   * @type {number}
   * @memberof Card
   */
  id: number;
  /**
   *
   * @type {EnumClass}
   * @memberof Card
   */
  class: EnumClass;
  /**
   *
   * @type {EnumPart}
   * @memberof Card
   */
  part: EnumPart;
  /**
   *
   * @type {EnumEnergyCost}
   * @memberof Card
   */
  energyCost: EnumEnergyCost;
  /**
   *
   * @type {number}
   * @memberof Card
   */
  value?: number;
  /**
   *
   * @type {EnumEffect}
   * @memberof Card
   */
  effect?: EnumEffect;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  description: string;
  /**
   *
   * @type {Array<EnumTag>}
   * @memberof Card
   */
  abilities?: Array<EnumTag>;
  /**
   *
   * @type {string}
   * @memberof Card
   */
  illustrationUrl: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EnumClass = {
  Aquatic: "aquatic",
  Beast: "beast",
  Bird: "bird",
  Bug: "bug",
  Plant: "plant",
  Reptile: "reptile",
} as const;

export type EnumClass = typeof EnumClass[keyof typeof EnumClass];

/**
 *
 * @export
 * @enum {string}
 */

export const EnumEffect = {
  Attack: "attack",
  Heal: "heal",
  Shield: "shield",
} as const;

export type EnumEffect = typeof EnumEffect[keyof typeof EnumEffect];

/**
 *
 * @export
 * @enum {string}
 */

export const EnumEnergyCost = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type EnumEnergyCost = typeof EnumEnergyCost[keyof typeof EnumEnergyCost];

/**
 *
 * @export
 * @enum {string}
 */

export const EnumPart = {
  Eyes: "eyes",
  Ears: "ears",
  Back: "back",
  Horn: "horn",
  Mouth: "mouth",
  Tail: "tail",
} as const;

export type EnumPart = typeof EnumPart[keyof typeof EnumPart];

/**
 *
 * @export
 * @enum {string}
 */

export const EnumTag = {
  Attack: "attack",
  Skill: "skill",
  Power: "power",
  Secret: "secret",
  Retain: "retain",
  Innate: "innate",
  Banish: "banish",
} as const;

export type EnumTag = typeof EnumTag[keyof typeof EnumTag];

/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  string?: string;
  /**
   *
   * @type {Array<EnumPart>}
   * @memberof InlineObject
   */
  part?: Array<EnumPart>;
  /**
   *
   * @type {Array<EnumClass>}
   * @memberof InlineObject
   */
  class?: Array<EnumClass>;
  /**
   *
   * @type {Array<EnumEnergyCost>}
   * @memberof InlineObject
   */
  energyCost?: Array<EnumEnergyCost>;
  /**
   *
   * @type {Array<EnumTag>}
   * @memberof InlineObject
   */
  tags?: Array<EnumTag>;
}

/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Retrieve all the Axie Infinity: Origin cards
     * @summary Get All Cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1Cards: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/cards`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a card by ID
     * @summary Get Card by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1CardsId: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/cards/:id`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Search for specific cards
     * @summary Search for Cards
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1CardsSearch: async (
      inlineObject?: InlineObject,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/cards/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieve all the Axie Infinity: Origin cards
     * @summary Get All Cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getApiV1Cards(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Card>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Cards(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieve a card by ID
     * @summary Get Card by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getApiV1CardsId(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsId(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Search for specific cards
     * @summary Search for Cards
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getApiV1CardsSearch(
      inlineObject?: InlineObject,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Card>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getApiV1CardsSearch(
          inlineObject,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CardsApiFp(configuration);
  return {
    /**
     * Retrieve all the Axie Infinity: Origin cards
     * @summary Get All Cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1Cards(options?: any): AxiosPromise<Array<Card>> {
      return localVarFp
        .getApiV1Cards(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a card by ID
     * @summary Get Card by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1CardsId(options?: any): AxiosPromise<Card> {
      return localVarFp
        .getApiV1CardsId(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Search for specific cards
     * @summary Search for Cards
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiV1CardsSearch(
      inlineObject?: InlineObject,
      options?: any
    ): AxiosPromise<Array<Card>> {
      return localVarFp
        .getApiV1CardsSearch(inlineObject, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI {
  /**
   * Retrieve all the Axie Infinity: Origin cards
   * @summary Get All Cards
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CardsApi
   */
  public getApiV1Cards(options?: AxiosRequestConfig) {
    return CardsApiFp(this.configuration)
      .getApiV1Cards(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a card by ID
   * @summary Get Card by ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CardsApi
   */
  public getApiV1CardsId(options?: AxiosRequestConfig) {
    return CardsApiFp(this.configuration)
      .getApiV1CardsId(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Search for specific cards
   * @summary Search for Cards
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CardsApi
   */
  public getApiV1CardsSearch(
    inlineObject?: InlineObject,
    options?: AxiosRequestConfig
  ) {
    return CardsApiFp(this.configuration)
      .getApiV1CardsSearch(inlineObject, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
